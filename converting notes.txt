signed
+
-
--------


65 to bin
2^1 = 2
2^2 = 4
2^3 = 8
2^4 = 16
2^5 = 32
2^6 = 64


01000001 = 65
--------

63 % 2 = 1
(int 63/2)%2 = 1
(int 31/2)%2 = 1
(int 15/2)%2 = 1
(int 7/2)%2 = 1
(int 3/2)%2 = 1

63 % 16 = 15
int(63/16) % 16 = 3

= 3F


3 = 11
F = 1111

negative numbers
1's complement
2's complement

1's comp
-x = ~x
take the number and invert it

00111111
--------
1's comp (flip the bit)
11000000
--------

2's comp = -x = ~x + 1
00111111
11000000
+      1
---------
11000001




00111111 ~ 63
11000001 ~ -63
+
--------
00000000 
~~~~~~~~~~~~~~~~~~~~~~
homework problems
1 byte 37, -37 == 00010101,  11101011
2 byte 315, -315 == 0000000010011011, 1111111101100101
4 byte 39363 -39363 == 00000000000000001001100111000011, 11111111111111110110011000111101
binary
hex

~~~~~~~~~~~~~```~~~~~~~
10101
--------
00010101

11101010
       1
======== +
11101011

315 /157 /78 /39 /19 /4 /2 /1
--------|--------
00000000|10011011

inverse
--------|--------
11111111|01100100
+1
11111111|01100101


39363 /19681 /9840 /4920 /2460 /1230 /615 /307 /153 /76 /38 /19 /9 /4 /2 /1
--------|--------|--------|--------
00000000|00000000|10011001|11000011
11111111|11111111|01100110|00111100
+1
11111111|11111111|01100110|00111101


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
101 = 
101 << 1 = 1010 = 10
1010 << 1 = 10100 = 20

O===============O
|DEC| BIN  | HEX|
|1  | 0001 | 1  |
|2  | 0010 | 2  |
|3  | 0011 | 3  |
|4  | 0100 | 4  |
|5  | 0101 | 5  |
|6  | 0110 | 6  |
|7  | 0111 | 7  |
|8  | 1000 | 8  |
|9  | 1001 | 9  |
|10 | 1010 | A  |
|11 | 1011 | B  |
|12 | 1100 | C  |
|13 | 1101 | D  |
|14 | 1110 | E  |
|15 | 1111 | F  |
O===============O

6*9
  1001
   110
   ---
  0000
 1001
1001
-----
110110

     101 @BP0  width 3
--------
    1010 @BP-1 wd 3
--------



1 byte 	32.1x10^1
2 byte	3.6x10^2 (convert to match 10^1)
+

1 byte 	32.1x10^1  wd 3
2 byte	36.0x10^1  wd 2
+_____	_________  ____
		68.1x10^1  wd 4
		
99		wd2
+0.999	wd3
______  __
		wd6
(sd = significate digits)
 999 sd3
* 99 sd2
     sd5
	 
adding take highest sd and add 1 ( eg sg3 & sg2 = sg4 )
multiple add both sds ( eg sg2 & sg 3 = sg5 )



  10
* .375
1010
 .375*2 = .75
 .75*2=1.5
 .5*2= 1
 
  1011x2^0
  .011x2^0
  .11x2^1
  1.1x2^2
  11x2^3
  
  
    1010  @bp 0 wd 4
--------|--------|--------|--------
      11  @bp -3 wd 2
--------|--------|--------|--------
    1010
   1010
--------|--------|--------|--------
   11110 @bp -3 wd 6  
--------|--------|--------|--------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HOMEWORK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Add 317+55
Multiply 89*33

include the binary points and widths
bp should be 0 and widths will vary

89%16 = 9
89/16=5 % 16 = 5 
59
1011001
33%16 = 1 
(33/16)%16 = 2 

	    1011001
	    *100001
	    ----------
	    1011001
1011001
101101111001

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
convert
	inches to feet
	12 in = 1 ft
	
108in to feet
		1ft		= 9ft
		12in
		
108
6c
110 1100 bp0 wd 7

1/12
1/12 * 16 = 1 1/3
1/3 * 16 = 5 1/3
1/3*16 = 5 1/3

.15
   -

 .156
 .0001 0101 0110
 0001 0101 0110 x 2^-12
 
 101010110 bp -12 wd 9
 
 
					1101100 bp 0 wd 7
				 101010110 bp -12 wd 9
									bp-12 wd16
									
integer X fraction
8         X  3/4      = 6
#8
#0x1000

3/4 X 16 = 12 = c
.c
.1100 
.11 bp 0 wd 2
11 bp -2 wd 2


8  -> bin = 1000		bp 0 wd 4
3/4 -> bin = 11			bp -2 wd 2
mulitple these two tegther

 1000
1000
-------
11000 bp -2 wd 6
shift to the right by 2 spots
110 bp 0 wd 4


to compile 
as -o out src
ld -o src out
./ld-created
echo $?


48 * 9/16

48 % 16 = 30

11 0000 -> 11x2^4

9/16 x 16 = 9/16
.9
.1001
1001x2^-4

    11
x1001
 ------
 1001
1001
-------
11011 = 27


mov r1, #48 									/*bp 0 wd 6*/
ldr r2, =0x00000009 						/*bp -4 wd 4 load register */
mul r0, r2, r1									/*bp-4 wd 10*/
lsr r0, #4										/*bp0 wd 6 logical shift right */



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
																HOMEWORK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) convert months to years
		start with 88 months ( keep this in 1 byte )
		conversion 3 bytes
		result 1 byte
2) Area calculate the radius squared  pi*r^2
		110 area -> 1 byte
		conversion -> 3 bytes
		result -> 1 byte
3) Area calculate the radius squared
		113.4 -> 2 bytes
		conversion -> 2 bytes
		result -> 1 byte
4) Area calculate the radius squared
		radius = 6 -> 1 byte
		conversion -> 3 bytes
		result -> 1 byte
5) same as 4
		radius 6.5 -> 2 bytes
		conversion -> 2 bytes
		result -> 1 byte
		
		
12.75 

1100.1100x2^0
110011x2^-2
110011 bp -2 wd 6

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		homework
1/12 = 0.08333333333333333333333333333333
1.3333333333333333333333333333333
5.3333333333333333333333333333328
5.3333333333333333333333333333248

.155

00010101

mov r1, #88 								/*bp 0 wd 6*/
ldr r2, =0x00155556 						/*bp -24 wd 24 load register */
mul r0, r2, r1								/*bp-24 wd 30*/
lsr r0, #4

notes from doing homework
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3.14159265359
3.

.14159265359*16= 2.26548245744
.26548245744*16= 4.24771931904
.24771931904*16= 3.96350910464
.96350910464*16= 15.41614567424
.41614567424*16= 6.65833078784
.65833078784*16= 10.53329260544
.53329260544*16= 8.53268168704


3.243f6a8  bp0 wd 32
3243f6a8 bp -28 wd 32


O===============O
|DEC| BIN  | HEX|
|1  | 0001 | 1  |
|2  | 0010 | 2  |
|3  | 0011 | 3  |
|4  | 0100 | 4  |
|5  | 0101 | 5  |
|6  | 0110 | 6  |
|7  | 0111 | 7  |
|8  | 1000 | 8  |
|9  | 1001 | 9  |
|10 | 1010 | A  |
|11 | 1011 | B  |
|12 | 1100 | C  |
|13 | 1101 | D  |
|14 | 1110 | E  |
|15 | 1111 | F  |
O===============O
3.243f6a8
11.0010010000111111011010101000

3243f6
01110010 01000011 11110110


1/pi = 0.31830988618379067153776752674503

0.31830988618379067153776752674503*16=5.0929581789406507446042804279205
.0929581789406507446042804279205*16= 1.487330863050411913668486846728
.487330863050411913668486846728*16= 7.797293808806590618695789547648
.797293808806590618695789547648*16= 12.756700940905449899132632762368
.756700940905449899132632762368*16= 12.107215054487198386122124197888
.107215054487198386122124197888*16= 1.715440871795174177953987166208
.715440871795174177953987166208*16= 11.447053948722786847263794659328
.447053948722786847263794659328*16= 7.152863179564589556220714549248
.152863179564589556220714549248*16= 2.445810873033432899531432787968
.445810873033432899531432787968*16= 7.132973968534926392502924607488
.132973968534926392502924607488*16= 2.127583496558822280046793719808
.127583496558822280046793719808*16= 2.041335944941156480748699516928
.041335944941156480748699516928*16= 0.661375119058503691979192270848
.661375119058503691979192270848*16= 10.582001904936059071667076333568
.582001904936059071667076333568*16= 9.312030478976945146673221337088

.517cc1b7 27220a9
 --------|--------

01010001 01111100 11000001
--------|--------
 
113.4
0x71.66666666666666
01110001.01100110 01100110 01100110
--------|--------|--------|--------|


71.66 
7166x16^-2
7166x2^-8




