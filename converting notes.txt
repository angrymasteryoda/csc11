signed
+
-
--------


65 to bin
2^1 = 2
2^2 = 4
2^3 = 8
2^4 = 16
2^5 = 32
2^6 = 64


01000001 = 65
--------

63 % 2 = 1
(int 63/2)%2 = 1
(int 31/2)%2 = 1
(int 15/2)%2 = 1
(int 7/2)%2 = 1
(int 3/2)%2 = 1

63 % 16 = 15
int(63/16) % 16 = 3

= 3F


3 = 11
F = 1111

negative numbers
1's complement
2's complement

1's comp
-x = ~x
take the number and invert it

00111111
--------
1's comp (flip the bit)
11000000
--------

2's comp = -x = ~x + 1
00111111
11000000
+      1
---------
11000001




00111111 ~ 63
11000001 ~ -63
+
--------
00000000 
~~~~~~~~~~~~~~~~~~~~~~
homework problems
1 byte 37, -37 == 00010101,  11101011
2 byte 315, -315 == 0000000010011011, 1111111101100101
4 byte 39363 -39363 == 00000000000000001001100111000011, 11111111111111110110011000111101
binary
hex

~~~~~~~~~~~~~```~~~~~~~
10101
--------
00010101

11101010
       1
======== +
11101011

315 /157 /78 /39 /19 /4 /2 /1
--------|--------
00000000|10011011

inverse
--------|--------
11111111|01100100
+1
11111111|01100101


39363 /19681 /9840 /4920 /2460 /1230 /615 /307 /153 /76 /38 /19 /9 /4 /2 /1
--------|--------|--------|--------
00000000|00000000|10011001|11000011
11111111|11111111|01100110|00111100
+1
11111111|11111111|01100110|00111101


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
101 = 
101 << 1 = 1010 = 10
1010 << 1 = 10100 = 20

O===============O
|DEC| BIN  | HEX|
|1  | 0001 | 1  |
|2  | 0010 | 2  |
|3  | 0011 | 3  |
|4  | 0100 | 4  |
|5  | 0101 | 5  |
|6  | 0110 | 6  |
|7  | 0111 | 7  |
|8  | 1000 | 8  |
|9  | 1001 | 9  |
|10 | 1010 | A  |
|11 | 1011 | B  |
|12 | 1100 | C  |
|13 | 1101 | D  |
|14 | 1110 | E  |
|15 | 1111 | F  |
O===============O

6*9
  1001
   110
   ---
  0000
 1001
1001
-----
110110

     101 @BP0  width 3
--------
    1010 @BP-1 wd 3
--------



1 byte 	32.1x10^1
2 byte	3.6x10^2 (convert to match 10^1)
+

1 byte 	32.1x10^1  wd 3
2 byte	36.0x10^1  wd 2
+_____	_________  ____
		68.1x10^1  wd 4
		
99		wd2
+0.999	wd3
______  __
		wd6
(sd = significate digits)
 999 sd3
* 99 sd2
     sd5
	 
adding take highest sd and add 1 ( eg sg3 & sg2 = sg4 )
multiple add both sds ( eg sg2 & sg 3 = sg5 )



  10
* .375
1010
 .375*2 = .75
 .75*2=1.5
 .5*2= 1
 
  1011x2^0
  .011x2^0
  .11x2^1
  1.1x2^2
  11x2^3
  
  
    1010  @bp 0 wd 4
--------|--------|--------|--------
      11  @bp -3 wd 2
--------|--------|--------|--------
    1010
   1010
--------|--------|--------|--------
   11110 @bp -3 wd 6  
--------|--------|--------|--------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
HOMEWORK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Add 317+55
Multiply 89*33

include the binary points and widths
bp should be 0 and widths will vary

89%16 = 9
89/16=5 % 16 = 5 
59
1011001
33%16 = 1 
(33/16)%16 = 2 

	    1011001
	    *100001
	    ----------
	    1011001
1011001
101101111001

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
convert
	inches to feet
	12 in = 1 ft
	
108in to feet
		1ft		= 9ft
		12in
		
108
6c
110 1100 bp0 wd 7

1/12
1/12 * 16 = 1 1/3
1/3 * 16 = 5 1/3
1/3*16 = 5 1/3

.15
   -

 .156
 .0001 0101 0110
 0001 0101 0110 x 2^-12
 
 101010110 bp -12 wd 9
 
 
					1101100 bp 0 wd 7
				 101010110 bp -12 wd 9
									bp-12 wd16
									
integer X fraction
8         X  3/4      = 6
#8
#0x1000

3/4 X 16 = 12 = c
.c
.1100 
.11 bp 0 wd 2
11 bp -2 wd 2


8  -> bin = 1000		bp 0 wd 4
3/4 -> bin = 11			bp -2 wd 2
mulitple these two tegther

 1000
1000
-------
11000 bp -2 wd 6
shift to the right by 2 spots
110 bp 0 wd 4


to compile 
as -o out src
ld -o src out
./ld-created
echo $?


48 * 9/16

48 % 16 = 30

11 0000 -> 11x2^4

9/16 x 16 = 9/16
.9
.1001
1001x2^-4

    11
x1001
 ------
 1001
1001
-------
11011 = 27


mov r1, #48 									/*bp 0 wd 6*/
ldr r2, =0x00000009 						/*bp -4 wd 4 load register */
mul r0, r2, r1									/*bp-4 wd 10*/
lsr r0, #4										/*bp0 wd 6 logical shift right */



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
							HOMEWORK
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) convert months to years
		start with 88 months ( keep this in 1 byte )
		conversion 3 bytes
		result 1 byte
2) Area calculate the radius squared  pi*r^2
		110 area -> 1 byte
		conversion -> 3 bytes
		result -> 1 byte
3) Area calculate the radius squared
		113.4 -> 2 bytes
		conversion -> 2 bytes
		result -> 1 byte
4) Area calculate the radius squared
		radius = 6 -> 1 byte
		conversion -> 3 bytes
		result -> 1 byte
5) same as 4
		radius 6.5 -> 2 bytes
		conversion -> 2 bytes
		result -> 1 byte
		
		
12.75 

1100.1100x2^0
110011x2^-2
110011 bp -2 wd 6

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		homework
1/12 = 0.08333333333333333333333333333333
1.3333333333333333333333333333333
5.3333333333333333333333333333328
5.3333333333333333333333333333248

.155

00010101

mov r1, #88 								/*bp 0 wd 6*/
ldr r2, =0x00155556 						/*bp -24 wd 24 load register */
mul r0, r2, r1								/*bp-24 wd 30*/
lsr r0, #4

notes from doing homework
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3.14159265359
3.

.14159265359*16= 2.26548245744
.26548245744*16= 4.24771931904
.24771931904*16= 3.96350910464
.96350910464*16= 15.41614567424
.41614567424*16= 6.65833078784
.65833078784*16= 10.53329260544
.53329260544*16= 8.53268168704


3.243f6a8  bp0 wd 32
3243f6a8 bp -28 wd 32


O===============O
|DEC| BIN  | HEX|
|1  | 0001 | 1  |
|2  | 0010 | 2  |
|3  | 0011 | 3  |
|4  | 0100 | 4  |
|5  | 0101 | 5  |
|6  | 0110 | 6  |
|7  | 0111 | 7  |
|8  | 1000 | 8  |
|9  | 1001 | 9  |
|10 | 1010 | A  |
|11 | 1011 | B  |
|12 | 1100 | C  |
|13 | 1101 | D  |
|14 | 1110 | E  |
|15 | 1111 | F  |
O===============O
3.243f6a8
11.0010010000111111011010101000

3243f6
01110010 01000011 11110110


1/pi = 0.31830988618379067153776752674503

0.31830988618379067153776752674503*16=5.0929581789406507446042804279205
.0929581789406507446042804279205*16= 1.487330863050411913668486846728
.487330863050411913668486846728*16= 7.797293808806590618695789547648
.797293808806590618695789547648*16= 12.756700940905449899132632762368
.756700940905449899132632762368*16= 12.107215054487198386122124197888
.107215054487198386122124197888*16= 1.715440871795174177953987166208
.715440871795174177953987166208*16= 11.447053948722786847263794659328
.447053948722786847263794659328*16= 7.152863179564589556220714549248
.152863179564589556220714549248*16= 2.445810873033432899531432787968
.445810873033432899531432787968*16= 7.132973968534926392502924607488
.132973968534926392502924607488*16= 2.127583496558822280046793719808
.127583496558822280046793719808*16= 2.041335944941156480748699516928
.041335944941156480748699516928*16= 0.661375119058503691979192270848
.661375119058503691979192270848*16= 10.582001904936059071667076333568
.582001904936059071667076333568*16= 9.312030478976945146673221337088

.517cc1b7 27220a9
 --------|--------

01010001 01111100 11000001
--------|--------
 
113.4
0x71.66666666666666
01110001.01100110 01100110 01100110
--------|--------|--------|--------|


71.66 
7166x16^-2
7166x2^-8




~~~~~
x.y

x%b = D1
int( x1/b) % b = D2
int( x2/b) % b = D3

y*b=f1.z1
z1*b=f2.z2
z2*b=f3

d3d2d1f1f2f3.  @ bp -12 wd 24


x in * foot / 12in = y feet
0.1/12 = 0.08333333
1/12 *16 = 1 1/3
1/3*16 = 5 1/3
1/3 * 16 = 5 1/3 
0.155555
0.155556 * 16^0
0155556 * 16 ^-6 == 2^4^-6 = 2^-24


x*1555556 * 2^-24
simple multiplication
mov r1 @bp 0 wd 7
ldr r2, =0x15555556 @bp -24 wd 24
mul r0, r1, r2 @bp -24 wd 31
lsr ro, #24 @bp 0 wd 7

22/7  approx of pi

22/7 = 3 1/7
1/7*16 = 2 2/7
2/7 * 16= 4 4/7
4/7 * 16 = 9 1/7
1/7*16 = 2 2/7
2/7 * 16= 4 4/7

3.24924 bp 0 wd 24
324924 bp -5 wd 24


ldr r2, =0x324924 @bp -20 wd 24
mov r1, #6
mul r0, r1, r1 @bp -0 wd 8
mul r0, r0, r2 @bp -20 wd 32


multiplication by successive addition

.global _start
_start:
	@declare variables
	mov r0, #0
	move r1, #3
	move r2, #4

/* loop for successive additions representing multiplication */	
_while_r1_ge_1:
	cmp r1, #1
	blt _output
		add r0, r0, r2  @r0 = r0+r2
		sub r1, r1, #1  @r1 = r1 -1
	bal _while_r1_ge_1
	
/* prepare for output */
_output:
	move r7, #1
	swi o

	
	21
	-6
1	__
	15
	-6
2	__
	 9
	-6
3	__
	 3	 == 21%6
	 
	 
r0 = <- /   counter
r1 = 21 <- %
r2 = 6
r3 = 21

copied r3 -> r1

_loop:
cmp r1, r2  // r1 > r2
ble _output
	sub r1, r1, r2
	add r0, r0, #1 //add to counter
bal _loop
_output: 
move r7, #1
swi 0



making a super fast division 
26/6  -- 26 -- 11010
      --  6 --   110
shift 6 over
	12 -> 1100
	24 -> 11000
	48 -> 110000 ( cant to big )
	
 11010
 11000
-_____
 00010
 
 
division peusdo
1: shift left to scale
2: subtraction
3: shift right and repeat 2 



using a different number

45/6
101101
110

r1 = 45
r2 = 6
r3 = 1 // scale
r4 = 6
r5 = 0  //counter

compare 45 and 6 
	6 is less
	shift left on both r4, r3
	r4 = 12
	r3 = 2
	goto compare
		is less
		shift left on both r4, r3
		r4 = 23
		r3 = 4
		goto compare
			is more 
			shift right on both r4, r3
	subtract r1, r1, r4
	101101
	-11000
	______
	 10101
	 add r3 into r5
	 shift right r3r4
	 compare
	 1100 less than 10101
		less
		10101
		-1100
		 1001
		 add r3 into r5
		 shift right r3r4
		 compare
		 101 less than 110
		 1001
		 -110
		 ____
		   11
		

each time you shift add to counter

O======================================================================================O
|                                    11/18/2015                                        |
O======================================================================================O

IEEE 754
--------|--------|--------|--------
||-------||-----------------------|
| Charictesic power               | 
sign                          mantissa fraction

power bias by 127

0.25
.25x2 = 0.5
.5*2 = 1.0
0*2 = 0

0.25 =2> 0.01
     =2> 1.00x2^-2
	 
	 
127-2 = 125
125%16 = D
int(125/16)%16 = 7
0x7d =2> 01111101
00111110|10000000|00000000|00000000
--------|--------|--------|--------
3e      | 80     | 00     | 00

0x3e800000

-----------------------------
49.5 =2> ?

49%16 = 1
int(49/16)%16 = 3

31 =2> 110001

.5*2=1.0
.5 =2> 0.1

110001.1
1.100011x2^5

127+5=132 =2> 01000

01000010|01000110
--------|--------|--------|--------
0x4246

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pi

3.14159265

.14159265*16= 2.2654824
.2654824*16 = 4.2477184
.2477184*16 = 3.9634944
.9634944*16 = 15.4159104
.4159104*16 = 6.6545664
.6545664*16 = 10.4730624

0x3.243f6
1.10010---x2^1

127+1=128

01000000|01001001|00001111|11011010
--------|--------|--------|--------
0x40490fda

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
65.75 convert to IEEE 754
65 % 16 = 1
4 %16 = 4
0x41

.75*16 = 12
01000001.1100
1.0000011100x2^6
127+6=0x85

01000010|10000011|10000000
--------|--------|--------|--------
0x42838000

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
homework
80.0625
1/e^2  or e^-2

50.1
1010000.0001
1.0100000001x2^6

127 + 6 = 133
133 =16> 85

10000101 = power
01000010|10100000|00100000
--------|--------|--------|--------|

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
double 8 bytes

bit locations
64 sign
63-52 power bias 1023
51-0 mantissa


80.0625
50.1
1010000.0001
1029 =16> 405
10000000101

0 10000000101 0100000001

0100 0000 | 0101 0100 | 0000 0100 | 0 ...
40 | 54 | 04 
0x4054040000000000


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
homework
pi
1/e^2


3.14159265358979323846264338

0011 

.14159265358979323846264338 = 2.26548245743669181540229408
.26548245743669181540229408 = 4.24771931898706904643670528
.24771931898706904643670528 = 3.96350910379310474298728448
.96350910379310474298728448 = 15.41614566068967588779655168
.41614566068967588779655168 = 6.65833057103481420474482688
.65833057103481420474482688 = 10.53328913655702727591723008
.53328913655702727591723008 = 8.53262618491243641467568128
.53262618491243641467568128 = 8.52201895859898263481090048
rest done on computer

0x.243f6a8885a307af7f8476b727080003209930
    .2   4    3    f    6    a    8    8    8    5    a    3    0    7    af7f8476b727080003209930
1.1 0010 0100 0011 1111 0110 1010 1000 1000 1000 0101 1010 0011 0000 0111 
0.1 0010 0100 0011 1111 0110 1010 1000 1000 1000 0101 1010 0011 000

400
